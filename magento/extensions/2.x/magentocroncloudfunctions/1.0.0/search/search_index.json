{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This documentation is for Magento 2.x. For Magento 1.x, see here . Table of Contents Home License Manuals UserManual.pdf Release Notes Repository Sitemap Versions What is Google Cloud Functions? Cloud Functions makes it easy for developers to run and scale code in the cloud and build event-driven serverless applications. Simplest way to run your code in the cloud Automatically scales, highly available and fault tolerant No servers to provision, manage, patch or update Pay only while your code runs Connects and extends cloud services Source: Google What is Magento Cron Cloud Functions? Magento Cron Cloud Functions is a Magento extension for running cron jobs via Google Cloud Functions . Benefits of Magento Cron Cloud Functions Using Google Cloud Functions to run Magento cron jobs can have significant benefits, including: Reduced memory and CPU consumption Improved horizontal scaling Inexpensive resource usage Ability to decouple job scheduler via Google Cloud Scheduler","title":"Home"},{"location":"#table-of-contents","text":"Home License Manuals UserManual.pdf Release Notes Repository Sitemap Versions","title":"Table of Contents"},{"location":"#what-is-google-cloud-functions","text":"Cloud Functions makes it easy for developers to run and scale code in the cloud and build event-driven serverless applications. Simplest way to run your code in the cloud Automatically scales, highly available and fault tolerant No servers to provision, manage, patch or update Pay only while your code runs Connects and extends cloud services Source: Google","title":"What is Google Cloud Functions?"},{"location":"#what-is-magento-cron-cloud-functions","text":"Magento Cron Cloud Functions is a Magento extension for running cron jobs via Google Cloud Functions .","title":"What is Magento Cron Cloud Functions?"},{"location":"#benefits-of-magento-cron-cloud-functions","text":"Using Google Cloud Functions to run Magento cron jobs can have significant benefits, including: Reduced memory and CPU consumption Improved horizontal scaling Inexpensive resource usage Ability to decouple job scheduler via Google Cloud Scheduler","title":"Benefits of Magento Cron Cloud Functions"},{"location":"quickstart/","text":"This documentation is for Magento 2.x. For Magento 1.x, see here . Quick Start This guide explains how to utilize Magento Cron Cloud Functions for Magento 2.x from within your own custom modules. Caveats Magento Cron Cloud Functions should only be used as a dependency for your own modules. Modifying the module directly can be very problematic when, for example, you upgrade versions or migrate environments. Getting Started To get started, take a look at the sample module we put together. You can use this as boilerplate for your module, as it's very easy to get up and running. Step One: Package Requirements As shown below and in composer.json , you will need to require auroraextensions/magentocroncloudfunctions : ... \"require\": { \"php\": \">=7.1\", \"auroraextensions/magentocroncloudfunctions\": \"~1.0.0\" }, ... Step Two: Virtual Types and Dependency Injection To maximize code reuse and minimize overhead needed to interface with HTTP endpoints, you can create <virtualType> classes that hold data specific to each Cloud Functions HTTP endpoint. As shown below and in etc/di.xml , there are two <virtualType> classes: <config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"> <virtualType name=\"VisitorLogCronJob\" type=\"AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Cron\\Job\"> <arguments> <argument name=\"jobCode\" xsi:type=\"string\">visitor_log_clean</argument> </arguments> </virtualType> <virtualType name=\"VisitorLogCloudFunctionHttpRequest\" type=\"AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Http\\Request\"> <arguments> <argument name=\"cronJob\" xsi:type=\"object\">VisitorLogCronJob</argument> </arguments> </virtualType> </config> VisitorLogCronJob is an instance of AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Cron\\Job , and contains the jobCode used to invoke the endpoint. VisitorLogCloudFunctionHttpRequest is an instance of AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Http\\Request , and is passed the VisitorLogCronJob instance. Step Three: Job Entries in crontab.xml Next, create a <job> entry in crontab.xml and use VisitorLogCloudFunctionHttpRequest for the instance attribute value: <config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Cron:etc/crontab.xsd\"> <group id=\"default\"> <job name=\"visitor_log_cloud_function_http_request\" instance=\"VisitorLogCloudFunctionHttpRequest\" method=\"execute\"> <schedule>* * * * *</schedule> </job> </group> </config> Step Four: Deploy Cloud Function There are several ways to set up the Cloud Function HTTP endpoint. See HTTP Triggers for more information. We'll use gcloud below to illustrate a quick way to create the appropriate HTTP endpoint. gcloud functions deploy visitor_log_clean --entry-point visitor_log_clean \\ --runtime python37 \\ --trigger-http If you're new to Cloud Functions, simply have the visitor_log_clean function print a string when it's invoked. Once you've become acquainted, we highly recommend implementing authentication in each cloud function you use, as cloud function endpoints are insecure, by default. Wrap Up That's it! With a minimal sample module, you're able to easily interact with Cloud Functions HTTP endpoint, enabling you to distribute Magento cron jobs across the cloud.","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"This guide explains how to utilize Magento Cron Cloud Functions for Magento 2.x from within your own custom modules.","title":"Quick Start"},{"location":"quickstart/#caveats","text":"Magento Cron Cloud Functions should only be used as a dependency for your own modules. Modifying the module directly can be very problematic when, for example, you upgrade versions or migrate environments.","title":"Caveats"},{"location":"quickstart/#getting-started","text":"To get started, take a look at the sample module we put together. You can use this as boilerplate for your module, as it's very easy to get up and running.","title":"Getting Started"},{"location":"quickstart/#step-one-package-requirements","text":"As shown below and in composer.json , you will need to require auroraextensions/magentocroncloudfunctions : ... \"require\": { \"php\": \">=7.1\", \"auroraextensions/magentocroncloudfunctions\": \"~1.0.0\" }, ...","title":"Step One: Package Requirements"},{"location":"quickstart/#step-two-virtual-types-and-dependency-injection","text":"To maximize code reuse and minimize overhead needed to interface with HTTP endpoints, you can create <virtualType> classes that hold data specific to each Cloud Functions HTTP endpoint. As shown below and in etc/di.xml , there are two <virtualType> classes: <config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"> <virtualType name=\"VisitorLogCronJob\" type=\"AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Cron\\Job\"> <arguments> <argument name=\"jobCode\" xsi:type=\"string\">visitor_log_clean</argument> </arguments> </virtualType> <virtualType name=\"VisitorLogCloudFunctionHttpRequest\" type=\"AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Http\\Request\"> <arguments> <argument name=\"cronJob\" xsi:type=\"object\">VisitorLogCronJob</argument> </arguments> </virtualType> </config> VisitorLogCronJob is an instance of AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Cron\\Job , and contains the jobCode used to invoke the endpoint. VisitorLogCloudFunctionHttpRequest is an instance of AuroraExtensions\\MagentoCronCloudFunctions\\Model\\Http\\Request , and is passed the VisitorLogCronJob instance.","title":"Step Two: Virtual Types and Dependency Injection"},{"location":"quickstart/#step-three-job-entries-in-crontabxml","text":"Next, create a <job> entry in crontab.xml and use VisitorLogCloudFunctionHttpRequest for the instance attribute value: <config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Cron:etc/crontab.xsd\"> <group id=\"default\"> <job name=\"visitor_log_cloud_function_http_request\" instance=\"VisitorLogCloudFunctionHttpRequest\" method=\"execute\"> <schedule>* * * * *</schedule> </job> </group> </config>","title":"Step Three: Job Entries in crontab.xml"},{"location":"quickstart/#step-four-deploy-cloud-function","text":"There are several ways to set up the Cloud Function HTTP endpoint. See HTTP Triggers for more information. We'll use gcloud below to illustrate a quick way to create the appropriate HTTP endpoint. gcloud functions deploy visitor_log_clean --entry-point visitor_log_clean \\ --runtime python37 \\ --trigger-http If you're new to Cloud Functions, simply have the visitor_log_clean function print a string when it's invoked. Once you've become acquainted, we highly recommend implementing authentication in each cloud function you use, as cloud function endpoints are insecure, by default.","title":"Step Four: Deploy Cloud Function"},{"location":"quickstart/#wrap-up","text":"That's it! With a minimal sample module, you're able to easily interact with Cloud Functions HTTP endpoint, enabling you to distribute Magento cron jobs across the cloud.","title":"Wrap Up"},{"location":"manuals/","text":"This documentation is for Magento 2.x. For Magento 1.x, see here . Manuals UserManual.pdf","title":"Manuals"},{"location":"manuals/#manuals","text":"UserManual.pdf","title":"Manuals"}]}