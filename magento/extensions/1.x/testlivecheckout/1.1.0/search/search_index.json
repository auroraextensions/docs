{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Table of Contents Home Quick Start Configuration Examples Guest Checkout Authorize.net Braintree License Manuals UserManual.pdf Puppeteer Scripts Release Notes Sitemap Versions What is automated browser testing? Automated browser testing (ABT) is the process of testing aspects of a website within the context of a web browser. As such, ABT has become an invaluable tool for online retailers who are looking to outpace the competition and provide their customers with the best experiences. What is Test Live Checkout? Test Live Checkout is a Magento extension intended for use with ABT tools, such as Puppeteer and Selenium . By allowing authenticated users to submit test orders using real products, Test Live Checkout can help aid in the discovery and remediation of issues affecting your checkout, which subsequently affect your bottom line, too. As a versatile tool, Test Live Checkout can also be used during development, testing, and QA processes because it provides helpful feedback regarding checkout health.","title":"Home"},{"location":"#table-of-contents","text":"Home Quick Start Configuration Examples Guest Checkout Authorize.net Braintree License Manuals UserManual.pdf Puppeteer Scripts Release Notes Sitemap Versions","title":"Table of Contents"},{"location":"#what-is-automated-browser-testing","text":"Automated browser testing (ABT) is the process of testing aspects of a website within the context of a web browser. As such, ABT has become an invaluable tool for online retailers who are looking to outpace the competition and provide their customers with the best experiences.","title":"What is automated browser testing?"},{"location":"#what-is-test-live-checkout","text":"Test Live Checkout is a Magento extension intended for use with ABT tools, such as Puppeteer and Selenium . By allowing authenticated users to submit test orders using real products, Test Live Checkout can help aid in the discovery and remediation of issues affecting your checkout, which subsequently affect your bottom line, too. As a versatile tool, Test Live Checkout can also be used during development, testing, and QA processes because it provides helpful feedback regarding checkout health.","title":"What is Test Live Checkout?"},{"location":"configuration/","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Configuration To configure Test Live Checkout, log into the admin panel and navigate to System \u2192 Configuration \u2192 Test Live Checkout (left sidebar, typically toward the bottom). General Settings Enable Live Checkout Testing : Enable the extension for use. This must be enabled for the extension to function. Authentication Token : An alphanumeric token used for authentication. Must be at least 32 characters in length, containing only letters and numbers. Redirect URL : The URL where the browser is redirected after a successful test order submission. The URL must be part of the same SLD as Magento. Log Settings Enable Logging : Enable transaction logging. For monitoring and debugging purposes, Test Live Checkout provides the ability to log test transactions. By default, transaction logging is disabled. Transaction Log During an authenticated transaction, Test Live Checkout will record certain fields from the order, such as response code, payment gateway name, and timestamp, which can be helpful when monitoring and debugging transactions. To view details of a particular transaction, select the transaction from the list.","title":"Configuration"},{"location":"configuration/#configuration","text":"To configure Test Live Checkout, log into the admin panel and navigate to System \u2192 Configuration \u2192 Test Live Checkout (left sidebar, typically toward the bottom).","title":"Configuration"},{"location":"configuration/#general-settings","text":"Enable Live Checkout Testing : Enable the extension for use. This must be enabled for the extension to function. Authentication Token : An alphanumeric token used for authentication. Must be at least 32 characters in length, containing only letters and numbers. Redirect URL : The URL where the browser is redirected after a successful test order submission. The URL must be part of the same SLD as Magento.","title":"General Settings"},{"location":"configuration/#log-settings","text":"Enable Logging : Enable transaction logging. For monitoring and debugging purposes, Test Live Checkout provides the ability to log test transactions. By default, transaction logging is disabled.","title":"Log Settings"},{"location":"configuration/#transaction-log","text":"During an authenticated transaction, Test Live Checkout will record certain fields from the order, such as response code, payment gateway name, and timestamp, which can be helpful when monitoring and debugging transactions. To view details of a particular transaction, select the transaction from the list.","title":"Transaction Log"},{"location":"quickstart/","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Quick Start This guide shows how to use Puppeteer with Test Live Checkout to simulate a guest checkout scenario. Requirements Docker docker-compose Git Node puppeteer Authorize.net Sandbox Credentials macOS Users: To run Docker locally, you need to install VirtualBox and Docker Machine . For Homebrew users, Docker Machine is available via homebrew/core and VirtualBox is available via homebrew/cask. brew update brew cask install virtualbox brew install docker-machine Once VirtualBox and Docker Machine are installed, you will need to create a new machine (VM). docker-machine create magento This will generate a new VM where the Docker processes will run. Lastly, you will need to export several docker-machine variables to your shell environment, in order for docker-machine to work properly. eval $(docker-machine env magento) Getting Started To get started, verify Docker is running properly. docker ps If the daemon process ( dockerd ) has yet to be started, you will receive an error. Next, we're going to use the prebuilt Magento 1.x setup provided by dockerized-magento . It will supply us with all of the necessary components we need to run Magento 1.9.3.9 locally. git clone https://github.com/andreaskoch/dockerized-magento.git cd dockerized-magento ./magento start Setup can take awhile the first time around, so be patient and follow the instructions to avoid issues. Payment Configuration Once dockerized-magento setup is complete, we need to update the payment methods configuration. From admin panel , navigate to System \u2192 Configuration \u2192 Sales \u2192 Payment Methods Click on Cash On Delivery Payment and set Enabled to No Click on Authorize.net (not Authorize.net Direct Post ) and set the following fields: Enabled to Yes Payment Action to Authorize and Capture API Login ID to your Sandbox API Login ID Merchant's Email to the email used for your Sandbox account Transaction Key to your Sandbox Transaction Key Click Save Config If you have caching enabled, clear the config cache. Extension Installation Once the payment gateway has been configured, we need to install Test Live Checkout. If you are unfamiliar with installing Magento extensions, a great resource to get started is The Ultimate Guide to Installing Magento Extensions . Extension Configuration After installing the extension, complete the following: From Admin area, navigate to System \u2192 Configuration \u2192 Test Live Checkout (left sidebar) Under General Settings , set Enable Live Checkout Testing to Yes Generate random 32 character alphanumeric string 1 and paste into Authentication Token field. Under Log Settings , set Enable Logging to Yes . Click Save Config Tests After configuring the extension, we can start running automated browser tests. Create a workspace directory and fetch a copy of the authorizenet.js Puppeteer script: mkdir tlc-puppeteer && cd tlc-puppeteer curl -fsLO \\ https://docs.auroraextensions.com/magento/extensions/1.x/testlivecheckout/1.1.0/puppeteer/src/guest-checkout/authorizenet.js The authorizenet.js Puppeteer script requires the environment variable TLC_AUTH_TOKEN to be present. Using the authentication token we created earlier, export TLC_AUTH_TOKEN to your shell environment. export TLC_AUTH_TOKEN=\"<AUTH_TOKEN_FROM_EARLIER>\" Next, install the puppeteer package via npm : npm install puppeteer Last but not least, let's run the script. node authorizenet.js Once the process has completed, you will be left with 9 PNGs showing various stages of checkout, and a GIF of all screenshots merged. To see what the end result will look like, take a look at Guest Checkout . Notes There are many ways to generate random, secure alphanumeric strings. Below is just one of many such ways: LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c 32 | xargs ;","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"This guide shows how to use Puppeteer with Test Live Checkout to simulate a guest checkout scenario.","title":"Quick Start"},{"location":"quickstart/#requirements","text":"Docker docker-compose Git Node puppeteer Authorize.net Sandbox Credentials macOS Users: To run Docker locally, you need to install VirtualBox and Docker Machine . For Homebrew users, Docker Machine is available via homebrew/core and VirtualBox is available via homebrew/cask. brew update brew cask install virtualbox brew install docker-machine Once VirtualBox and Docker Machine are installed, you will need to create a new machine (VM). docker-machine create magento This will generate a new VM where the Docker processes will run. Lastly, you will need to export several docker-machine variables to your shell environment, in order for docker-machine to work properly. eval $(docker-machine env magento)","title":"Requirements"},{"location":"quickstart/#getting-started","text":"To get started, verify Docker is running properly. docker ps If the daemon process ( dockerd ) has yet to be started, you will receive an error. Next, we're going to use the prebuilt Magento 1.x setup provided by dockerized-magento . It will supply us with all of the necessary components we need to run Magento 1.9.3.9 locally. git clone https://github.com/andreaskoch/dockerized-magento.git cd dockerized-magento ./magento start Setup can take awhile the first time around, so be patient and follow the instructions to avoid issues.","title":"Getting Started"},{"location":"quickstart/#payment-configuration","text":"Once dockerized-magento setup is complete, we need to update the payment methods configuration. From admin panel , navigate to System \u2192 Configuration \u2192 Sales \u2192 Payment Methods Click on Cash On Delivery Payment and set Enabled to No Click on Authorize.net (not Authorize.net Direct Post ) and set the following fields: Enabled to Yes Payment Action to Authorize and Capture API Login ID to your Sandbox API Login ID Merchant's Email to the email used for your Sandbox account Transaction Key to your Sandbox Transaction Key Click Save Config If you have caching enabled, clear the config cache.","title":"Payment Configuration"},{"location":"quickstart/#extension-installation","text":"Once the payment gateway has been configured, we need to install Test Live Checkout. If you are unfamiliar with installing Magento extensions, a great resource to get started is The Ultimate Guide to Installing Magento Extensions .","title":"Extension Installation"},{"location":"quickstart/#extension-configuration","text":"After installing the extension, complete the following: From Admin area, navigate to System \u2192 Configuration \u2192 Test Live Checkout (left sidebar) Under General Settings , set Enable Live Checkout Testing to Yes Generate random 32 character alphanumeric string 1 and paste into Authentication Token field. Under Log Settings , set Enable Logging to Yes . Click Save Config","title":"Extension Configuration"},{"location":"quickstart/#tests","text":"After configuring the extension, we can start running automated browser tests. Create a workspace directory and fetch a copy of the authorizenet.js Puppeteer script: mkdir tlc-puppeteer && cd tlc-puppeteer curl -fsLO \\ https://docs.auroraextensions.com/magento/extensions/1.x/testlivecheckout/1.1.0/puppeteer/src/guest-checkout/authorizenet.js The authorizenet.js Puppeteer script requires the environment variable TLC_AUTH_TOKEN to be present. Using the authentication token we created earlier, export TLC_AUTH_TOKEN to your shell environment. export TLC_AUTH_TOKEN=\"<AUTH_TOKEN_FROM_EARLIER>\" Next, install the puppeteer package via npm : npm install puppeteer Last but not least, let's run the script. node authorizenet.js Once the process has completed, you will be left with 9 PNGs showing various stages of checkout, and a GIF of all screenshots merged. To see what the end result will look like, take a look at Guest Checkout .","title":"Tests"},{"location":"quickstart/#notes","text":"There are many ways to generate random, secure alphanumeric strings. Below is just one of many such ways: LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c 32 | xargs ;","title":"Notes"},{"location":"examples/guest-checkout/authorizenet/","text":"Authorize.net Guest Checkout This documentation is for Magento 1.x. For Magento 2.x, see here . Tests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Authorize.net. Download You can download authorizenet.js here . Purpose To simulate a guest checkout scenario on a Magento 1.x storefront using Authorize.net. Steps Visit Home page and click on Bed & Bath link under Home & Decor navigation menu On Bed & Bath category page, click Add to Cart button on first product On Cart overview page, click Proceed to Checkout On Checkout page, click Checkout as Guest Fill in Billing Information section and click Continue Select Flat Rate option as shipping method and click Continue Fill in Payment Information section and click Continue Click Place Order to submit order On success, redirect to Home page Walkthrough Screenshots","title":"Authorize.net"},{"location":"examples/guest-checkout/authorizenet/#authorizenet-guest-checkout","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Tests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Authorize.net.","title":"Authorize.net Guest Checkout"},{"location":"examples/guest-checkout/authorizenet/#download","text":"You can download authorizenet.js here .","title":"Download"},{"location":"examples/guest-checkout/authorizenet/#purpose","text":"To simulate a guest checkout scenario on a Magento 1.x storefront using Authorize.net.","title":"Purpose"},{"location":"examples/guest-checkout/authorizenet/#steps","text":"Visit Home page and click on Bed & Bath link under Home & Decor navigation menu On Bed & Bath category page, click Add to Cart button on first product On Cart overview page, click Proceed to Checkout On Checkout page, click Checkout as Guest Fill in Billing Information section and click Continue Select Flat Rate option as shipping method and click Continue Fill in Payment Information section and click Continue Click Place Order to submit order On success, redirect to Home page","title":"Steps"},{"location":"examples/guest-checkout/authorizenet/#walkthrough","text":"","title":"Walkthrough"},{"location":"examples/guest-checkout/authorizenet/#screenshots","text":"","title":"Screenshots"},{"location":"examples/guest-checkout/braintree/","text":"Braintree Guest Checkout This documentation is for Magento 1.x. For Magento 2.x, see here . Braintree Payments With Hosted Fields is required by Test Live Checkout to use Braintree. Tests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Braintree. Download You can download braintree.js here . Purpose To simulate a guest checkout scenario on a Magento 1.x storefront using Braintree. Steps Visit Home page and click on Bed & Bath link under Home & Decor navigation menu On Bed & Bath category page, click Add to Cart button on first product On Cart overview page, click Proceed to Checkout On Checkout page, click Checkout as Guest Fill in Billing Information section and click Continue Select Flat Rate option as shipping method and click Continue Fill in Payment Information section and click Continue Click Place Order to submit order On success, redirect to Home page Walkthrough Screenshots","title":"Braintree"},{"location":"examples/guest-checkout/braintree/#braintree-guest-checkout","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Braintree Payments With Hosted Fields is required by Test Live Checkout to use Braintree. Tests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Braintree.","title":"Braintree Guest Checkout"},{"location":"examples/guest-checkout/braintree/#download","text":"You can download braintree.js here .","title":"Download"},{"location":"examples/guest-checkout/braintree/#purpose","text":"To simulate a guest checkout scenario on a Magento 1.x storefront using Braintree.","title":"Purpose"},{"location":"examples/guest-checkout/braintree/#steps","text":"Visit Home page and click on Bed & Bath link under Home & Decor navigation menu On Bed & Bath category page, click Add to Cart button on first product On Cart overview page, click Proceed to Checkout On Checkout page, click Checkout as Guest Fill in Billing Information section and click Continue Select Flat Rate option as shipping method and click Continue Fill in Payment Information section and click Continue Click Place Order to submit order On success, redirect to Home page","title":"Steps"},{"location":"examples/guest-checkout/braintree/#walkthrough","text":"","title":"Walkthrough"},{"location":"examples/guest-checkout/braintree/#screenshots","text":"","title":"Screenshots"},{"location":"manuals/","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Manuals UserManual.pdf","title":"Manuals"},{"location":"manuals/#manuals","text":"UserManual.pdf","title":"Manuals"}]}