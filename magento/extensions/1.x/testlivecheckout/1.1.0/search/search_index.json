{
    "docs": [
        {
            "location": "/",
            "text": "This documentation is for the Magento 1.x version. For the Magento 2.x version, see \nhere\n.\n\n\n\n\nBackground\n\n\nAutomated browser testing is an established paradigm that allows a developer to programmatically control a web browser through an API. While it may not seem obvious\nat first, this is especially valuable for online retailers because it allows a developer to simulate real user behaviors within the context of a web browser, providing\na mechanism for testing aspects of your storefront.\n\n\nAbout\n\n\nTest Live Checkout is intended for use with automated browser testing tools, such as \nPuppeteer\n and \nSelenium\n.\nBy allowing authenticated users to submit test orders using real products, Test Live Checkout can help aid in the discovery and remediation of issues affecting your checkout, which\nsubsequently affect your bottom line, too.\n\n\nTest Live Checkout provides the most value when used with automated browser tests, as part of a comprehensive transaction monitoring plan. However, it can be a helpful\ntool to use during development and testing phases, as well, because it provides useful feedback regarding checkout health.\n\n\nDownload\n\n\nThe extension is available for purchase \nhere\n.\n\n\nTable of Contents\n\n\n\n\nQuick Start\n\n\nConfiguration\n\n\nPuppeteer\n\n\nGuest Checkout\n\n\nAuthorize.net\n\n\nBraintree",
            "title": "Home"
        },
        {
            "location": "/#background",
            "text": "Automated browser testing is an established paradigm that allows a developer to programmatically control a web browser through an API. While it may not seem obvious\nat first, this is especially valuable for online retailers because it allows a developer to simulate real user behaviors within the context of a web browser, providing\na mechanism for testing aspects of your storefront.",
            "title": "Background"
        },
        {
            "location": "/#about",
            "text": "Test Live Checkout is intended for use with automated browser testing tools, such as  Puppeteer  and  Selenium .\nBy allowing authenticated users to submit test orders using real products, Test Live Checkout can help aid in the discovery and remediation of issues affecting your checkout, which\nsubsequently affect your bottom line, too.  Test Live Checkout provides the most value when used with automated browser tests, as part of a comprehensive transaction monitoring plan. However, it can be a helpful\ntool to use during development and testing phases, as well, because it provides useful feedback regarding checkout health.",
            "title": "About"
        },
        {
            "location": "/#download",
            "text": "The extension is available for purchase  here .",
            "title": "Download"
        },
        {
            "location": "/#table-of-contents",
            "text": "Quick Start  Configuration  Puppeteer  Guest Checkout  Authorize.net  Braintree",
            "title": "Table of Contents"
        },
        {
            "location": "/quickstart/",
            "text": "This documentation is for the Magento 1.x version. For the Magento 2.x version, see \nhere\n.\n\n\n\n\nQuick Start\n\n\nRequirements\n\n\n\n\nDocker\n\n\nGit\n\n\nNode\n\n\nAuthorize.net Sandbox Credentials\n\n\n\n\nSetup\n\n\nTo get started quickly, we're going to use \ndockerized-magento\n.\n\n\ngit clone https://github.com/andreaskoch/dockerized-magento\ncd dockerized-magento\n./magento start\n\n\n\n\nOnce dockerized-magento has completed setup, we need to disable \nCash On Delivery\n payment method and set up \nAuthorize.net\n.\n\n\n\n\nFrom Admin area, navigate to \nSystem\n -> \nConfiguration\n -> \nSales\n -> \nPayment Methods\n\n\nClick on \nCash On Delivery Payment\n and set \nEnabled\n to \nNo\n\n\nClick on \nAuthorize.net\n (not \nAuthorize.net Direct Post\n) and set the following fields:\n\n\nEnabled\n to \nYes\n\n\nPayment Action\n to \nAuthorize and Capture\n\n\nAPI Login ID\n to your Sandbox account API Login ID\n\n\nMerchant's Email\n to the email used for your Sandbox account\n\n\nTransaction Key\n to your Sandbox account Transaction Key\n\n\n\n\n\n\nClick \nSave Config\n\n\nIf you have caching enabled, clear the config cache.\n\n\n\n\nOnce the payment gateway has been configured, we need to install Test Live Checkout.\n\n\nAfter installing the extension, complete the following:\n\n\n\n\nFrom Admin area, navigate to \nSystem\n -> \nConfiguration\n -> \nNickolas Burr Extensions\n (sidebar) -> \nTest Live Checkout\n\n\nUnder \nGeneral Settings\n, set \nEnable Live Checkout Testing\n to \nYes\n\n\nGenerate random 32 character alphanumeric string and paste into \nAuthentication Token\n field\n\n\nClick \nSave Config\n\n\n\n\nAfter configuring the extension, complete the following:\n\n\n\n\n\n\nCreate a workspace directory:\n\n\nmkdir testlivecheckout-puppeteer && cd testlivecheckout-puppeteer\n\n\n\n\n\n\nFetch a copy of the \nguest-checkout.js\n Puppeteer script:\n\n\ncurl -fsL -O https://nickolasburr.github.io/magento/extensions/1.x/testlivecheckout/1.1.0/puppeteer/src/guest-checkout.js\n\n\n\n\n\n\nExport the authentication token from earlier to your shell environment:\n\n\nexport TLC_AUTH_TOKEN=\"<AUTH_TOKEN_FROM_EARLIER>\"\n\n\n\n\n\n\nRun \nguest-checkout.js\n:\n\n\nnode guest-checkout.js\n\n\n\n\n\n\nOnce the script has finished running, you should have 10 PNG screenshots of the various stages of checkout.\n\n\nTo see an example of what to expect, see \nGuest Checkout\n.",
            "title": "Quick Start"
        },
        {
            "location": "/quickstart/#quick-start",
            "text": "",
            "title": "Quick Start"
        },
        {
            "location": "/quickstart/#requirements",
            "text": "Docker  Git  Node  Authorize.net Sandbox Credentials",
            "title": "Requirements"
        },
        {
            "location": "/quickstart/#setup",
            "text": "To get started quickly, we're going to use  dockerized-magento .  git clone https://github.com/andreaskoch/dockerized-magento\ncd dockerized-magento\n./magento start  Once dockerized-magento has completed setup, we need to disable  Cash On Delivery  payment method and set up  Authorize.net .   From Admin area, navigate to  System  ->  Configuration  ->  Sales  ->  Payment Methods  Click on  Cash On Delivery Payment  and set  Enabled  to  No  Click on  Authorize.net  (not  Authorize.net Direct Post ) and set the following fields:  Enabled  to  Yes  Payment Action  to  Authorize and Capture  API Login ID  to your Sandbox account API Login ID  Merchant's Email  to the email used for your Sandbox account  Transaction Key  to your Sandbox account Transaction Key    Click  Save Config  If you have caching enabled, clear the config cache.   Once the payment gateway has been configured, we need to install Test Live Checkout.  After installing the extension, complete the following:   From Admin area, navigate to  System  ->  Configuration  ->  Nickolas Burr Extensions  (sidebar) ->  Test Live Checkout  Under  General Settings , set  Enable Live Checkout Testing  to  Yes  Generate random 32 character alphanumeric string and paste into  Authentication Token  field  Click  Save Config   After configuring the extension, complete the following:    Create a workspace directory:  mkdir testlivecheckout-puppeteer && cd testlivecheckout-puppeteer    Fetch a copy of the  guest-checkout.js  Puppeteer script:  curl -fsL -O https://nickolasburr.github.io/magento/extensions/1.x/testlivecheckout/1.1.0/puppeteer/src/guest-checkout.js    Export the authentication token from earlier to your shell environment:  export TLC_AUTH_TOKEN=\"<AUTH_TOKEN_FROM_EARLIER>\"    Run  guest-checkout.js :  node guest-checkout.js    Once the script has finished running, you should have 10 PNG screenshots of the various stages of checkout.  To see an example of what to expect, see  Guest Checkout .",
            "title": "Setup"
        },
        {
            "location": "/configuration/",
            "text": "This documentation is for the Magento 1.x version. For the Magento 2.x version, see \nhere\n.\n\n\n\n\nConfiguration\n\n\nSettings\n\n\n\n\nGeneral\n\n\nLog\n\n\n\n\nGeneral\n\n\n\n\nEnable Live Checkout Testing: Enable the extension for live use.\n\n\nAuthentication Token: Alphanumeric token used to authenticate a test order.\n\n\nRedirect URL: URL to 302 redirect to after a successful test order.\n\n\n\n\nLog\n\n\n\n\nEnable Logging: Enable transaction logging.\n\n\n\n\n\n\nTransaction Log\n\n\nThe transaction log must be enabled before any logs are recorded.\n\n\nDuring an authenticated transaction, Test Live Checkout will record certain fields\nfrom the order, such as the payment gateway and timestamp, that are helpful when\ndebugging checkout issues.",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#settings",
            "text": "General  Log",
            "title": "Settings"
        },
        {
            "location": "/configuration/#general",
            "text": "Enable Live Checkout Testing: Enable the extension for live use.  Authentication Token: Alphanumeric token used to authenticate a test order.  Redirect URL: URL to 302 redirect to after a successful test order.",
            "title": "General"
        },
        {
            "location": "/configuration/#log",
            "text": "Enable Logging: Enable transaction logging.",
            "title": "Log"
        },
        {
            "location": "/configuration/#transaction-log",
            "text": "The transaction log must be enabled before any logs are recorded.  During an authenticated transaction, Test Live Checkout will record certain fields\nfrom the order, such as the payment gateway and timestamp, that are helpful when\ndebugging checkout issues.",
            "title": "Transaction Log"
        },
        {
            "location": "/examples/guest-checkout/authorizenet/",
            "text": "This documentation is for the Magento 1.x version. For the Magento 2.x version, see \nhere\n.\n\n\n\n\nAuthorize.net Guest Checkout\n\n\nTests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Authorize.net.\n\n\n\nDownload\n\n\nYou can download \nauthorizenet.js\n \nhere\n.\n\n\nPurpose\n\n\nTo simulate a guest checkout scenario on a Magento 1.x storefront using Authorize.net.\n\n\nSteps\n\n\n\n\nVisit Home page and click on \nBed & Bath\n link under \nHome & Decor\n navigation menu\n\n\nOn \nBed & Bath\n category page, click \nAdd to Cart\n button on first product\n\n\nOn \nCart\n overview page, click \nProceed to Checkout\n\n\nOn \nCheckout\n page, click \nCheckout as Guest\n\n\nFill in \nBilling Information\n section and click \nContinue\n\n\nSelect \nFlat Rate\n option as shipping method and click \nContinue\n\n\nFill in \nPayment Information\n section and click \nContinue\n\n\nClick \nPlace Order\n to submit order\n\n\nOn success, redirect to Home page\n\n\n\n\nWalkthrough\n\n\n\n\nScreenshots",
            "title": "Authorize.net"
        },
        {
            "location": "/examples/guest-checkout/authorizenet/#authorizenet-guest-checkout",
            "text": "Tests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Authorize.net.",
            "title": "Authorize.net Guest Checkout"
        },
        {
            "location": "/examples/guest-checkout/authorizenet/#download",
            "text": "You can download  authorizenet.js   here .",
            "title": "Download"
        },
        {
            "location": "/examples/guest-checkout/authorizenet/#purpose",
            "text": "To simulate a guest checkout scenario on a Magento 1.x storefront using Authorize.net.",
            "title": "Purpose"
        },
        {
            "location": "/examples/guest-checkout/authorizenet/#steps",
            "text": "Visit Home page and click on  Bed & Bath  link under  Home & Decor  navigation menu  On  Bed & Bath  category page, click  Add to Cart  button on first product  On  Cart  overview page, click  Proceed to Checkout  On  Checkout  page, click  Checkout as Guest  Fill in  Billing Information  section and click  Continue  Select  Flat Rate  option as shipping method and click  Continue  Fill in  Payment Information  section and click  Continue  Click  Place Order  to submit order  On success, redirect to Home page",
            "title": "Steps"
        },
        {
            "location": "/examples/guest-checkout/authorizenet/#walkthrough",
            "text": "",
            "title": "Walkthrough"
        },
        {
            "location": "/examples/guest-checkout/authorizenet/#screenshots",
            "text": "",
            "title": "Screenshots"
        },
        {
            "location": "/examples/guest-checkout/braintree/",
            "text": "This documentation is for the Magento 1.x version. For the Magento 2.x version, see \nhere\n.\n\n\n\n\nBraintree Guest Checkout\n\n\n\n  \nBraintree Payments With Hosted Fields\n is a free extension by PayPal, and is required for use with Test Live Checkout and Braintree.\n\n\n\n\nTests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Braintree.\n\n\n\nDownload\n\n\nYou can download \nbraintree.js\n \nhere\n.\n\n\nPurpose\n\n\nTo simulate a guest checkout scenario on a Magento 1.x storefront using Braintree.\n\n\nSteps\n\n\n\n\nVisit Home page and click on \nBed & Bath\n link under \nHome & Decor\n navigation menu\n\n\nOn \nBed & Bath\n category page, click \nAdd to Cart\n button on first product\n\n\nOn \nCart\n overview page, click \nProceed to Checkout\n\n\nOn \nCheckout\n page, click \nCheckout as Guest\n\n\nFill in \nBilling Information\n section and click \nContinue\n\n\nSelect \nFlat Rate\n option as shipping method and click \nContinue\n\n\nFill in \nPayment Information\n section and click \nContinue\n\n\nClick \nPlace Order\n to submit order\n\n\nOn success, redirect to Home page\n\n\n\n\nWalkthrough\n\n\n\n\nScreenshots",
            "title": "Braintree"
        },
        {
            "location": "/examples/guest-checkout/braintree/#braintree-guest-checkout",
            "text": "Braintree Payments With Hosted Fields  is a free extension by PayPal, and is required for use with Test Live Checkout and Braintree.  Tests were performed using Puppeteer, Magento 1.9.3.9 CE with sample data, and Braintree.",
            "title": "Braintree Guest Checkout"
        },
        {
            "location": "/examples/guest-checkout/braintree/#download",
            "text": "You can download  braintree.js   here .",
            "title": "Download"
        },
        {
            "location": "/examples/guest-checkout/braintree/#purpose",
            "text": "To simulate a guest checkout scenario on a Magento 1.x storefront using Braintree.",
            "title": "Purpose"
        },
        {
            "location": "/examples/guest-checkout/braintree/#steps",
            "text": "Visit Home page and click on  Bed & Bath  link under  Home & Decor  navigation menu  On  Bed & Bath  category page, click  Add to Cart  button on first product  On  Cart  overview page, click  Proceed to Checkout  On  Checkout  page, click  Checkout as Guest  Fill in  Billing Information  section and click  Continue  Select  Flat Rate  option as shipping method and click  Continue  Fill in  Payment Information  section and click  Continue  Click  Place Order  to submit order  On success, redirect to Home page",
            "title": "Steps"
        },
        {
            "location": "/examples/guest-checkout/braintree/#walkthrough",
            "text": "",
            "title": "Walkthrough"
        },
        {
            "location": "/examples/guest-checkout/braintree/#screenshots",
            "text": "",
            "title": "Screenshots"
        }
    ]
}