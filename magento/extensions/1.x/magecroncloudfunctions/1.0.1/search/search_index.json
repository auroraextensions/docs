{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Table of Contents Home Examples Visitor Log Clean License Manuals UserManual.pdf Python Scripts Release Notes Repository Sitemap Versions What is Cloud Functions? Cloud Functions makes it easy for developers to run and scale code in the cloud and build event-driven serverless applications. Simplest way to run your code in the cloud Automatically scales, highly available and fault tolerant No servers to provision, manage, patch or update Pay only while your code runs Connects and extends cloud services Source: Google What is Mage Cron Cloud Functions? Mage Cron Cloud Functions is a Magento extension for running cron tasks via Cloud Functions.","title":"Home"},{"location":"#table-of-contents","text":"Home Examples Visitor Log Clean License Manuals UserManual.pdf Python Scripts Release Notes Repository Sitemap Versions","title":"Table of Contents"},{"location":"#what-is-cloud-functions","text":"Cloud Functions makes it easy for developers to run and scale code in the cloud and build event-driven serverless applications. Simplest way to run your code in the cloud Automatically scales, highly available and fault tolerant No servers to provision, manage, patch or update Pay only while your code runs Connects and extends cloud services Source: Google","title":"What is Cloud Functions?"},{"location":"#what-is-mage-cron-cloud-functions","text":"Mage Cron Cloud Functions is a Magento extension for running cron tasks via Cloud Functions.","title":"What is Mage Cron Cloud Functions?"},{"location":"installation/","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Installation Guide This guide explains how to install Mage Cron Cloud Functions. Dependencies Google Cloud PHP Autoloader Installing Below are examples of how to install the extension via modman and manually. modman modman init # Only run if you haven't initialized modman yet. modman clone https://github.com/nickolasburrMageCronCloudFunctions.git modman deployMageCronCloudFunctions Manual cd /var/www # Replace /var/www with the Magento root directory. git -C /tmp/ clone https://github.com/nickolasburrMageCronCloudFunctions.git rsync -Pahmvz --stats \\ --exclude=\"package.xml\" \\ --exclude=\".git*\" \\ --exclude=\"modman\" \\ /tmpMageCronCloudFunctions/* ./ rm -rf /tmpMageCronCloudFunctions Wrap Up Before attempting to configure the extension, make sure to clear the configuration cache, and, if any admin sessions are open, log out and log back in.","title":"Installation"},{"location":"installation/#installation-guide","text":"This guide explains how to install Mage Cron Cloud Functions.","title":"Installation Guide"},{"location":"installation/#dependencies","text":"Google Cloud PHP Autoloader","title":"Dependencies"},{"location":"installation/#installing","text":"Below are examples of how to install the extension via modman and manually.","title":"Installing"},{"location":"installation/#modman","text":"modman init # Only run if you haven't initialized modman yet. modman clone https://github.com/nickolasburrMageCronCloudFunctions.git modman deployMageCronCloudFunctions","title":"modman"},{"location":"installation/#manual","text":"cd /var/www # Replace /var/www with the Magento root directory. git -C /tmp/ clone https://github.com/nickolasburrMageCronCloudFunctions.git rsync -Pahmvz --stats \\ --exclude=\"package.xml\" \\ --exclude=\".git*\" \\ --exclude=\"modman\" \\ /tmpMageCronCloudFunctions/* ./ rm -rf /tmpMageCronCloudFunctions","title":"Manual"},{"location":"installation/#wrap-up","text":"Before attempting to configure the extension, make sure to clear the configuration cache, and, if any admin sessions are open, log out and log back in.","title":"Wrap Up"},{"location":"examples/","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Examples Sitemap Generation Visitor Log Clean","title":"All Examples"},{"location":"examples/#examples","text":"Sitemap Generation Visitor Log Clean","title":"Examples"},{"location":"examples/visitor_log_clean/","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . At the time of writing, Cloud Functions only supports three runtimes: Node.js 6, Node.js 8, and Python 3.7. Example: Clean Visitor Logs Requirements Active Google account GCP project with Cloud Functions API enabled Cloud SQL database instance gcloud command-line tool (Recommended) Downloads To use the Python runtime, two files are required: main.py and requirements.txt . You can download them here: main.py requirements.txt mkdir -pv visitor_log_clean && \\ curl -fsL \\ https://docs.auroraextensions.com/magento/extensions/1.x/magecroncloudfunctions/latest/python/src/visitor_log_clean/main.py > ./visitor_log_clean/main.py && \\ curl -fsL \\ https://docs.auroraextensions.com/magento/extensions/1.x/magecroncloudfunctions/latest/python/src/visitor_log_clean/requirements.txt > ./visitor_log_clean/requirements.txt Objective Clean the database of visitor log entries using Cloud Functions. Steps Create visitor_log_clean cloud function The following environment variables are required for Cloud Functions to access Cloud SQL: DB_NAME : The name of the Magento database. DB_USER : The name of the database user. DB_PASS : The database user's password. PROJECT_ID : The Google Cloud Platform project ID. REGION_ID : The region where the Cloud SQL instance exists (e.g. us-central1, us-east4). INSTANCE_NAME : The name of Cloud SQL instance. Using gcloud , run the following: gcloud functions deploy visitor_log_clean --entry-point=\"log_clean\" \\ --runtime=python37 \\ --set-env-vars=DB_NAME=<YOUR_DB_NAME>,DB_USER=<YOUR_DB_USER>,DB_PASS=<YOUR_DB_PASS>,PROJECT_ID=<GCP_PROJECT_ID>,REGION_ID=<CLOUD_SQL_REGION_ID>,INSTANCE_NAME=<CLOUD_SQL_INSTANCE_NAME> \\ --source=\"./visitor_log_clean\" \\ --trigger-http Alternatively, you can use the Cloud Functions interface. Click Create Function from the list overview, and specify the following: Name: visitor_log_clean Memory: 256MB Trigger: HTTP Source code: Inline editor Runtime: Python 3.7 main.py: Contents of main.py from above requirements.txt: Contents of requirements.txt from above Function to execute: log_clean Next, click More and set each of the environment variables listed above. Then click Create . Add entry to <crontab> To make use of visitor_log_clean from within Magento, you will need to add the following to your module config.xml file: <crontab> <jobs> <visitor_log_clean> <schedule> <cron_expr>30 2 * * *</cron_expr> </schedule> <run> <model>magecroncloudfunctions/observer::run</model> </run> </visitor_log_clean> </jobs> </crontab> Alternatively, you can use Aoe_Scheduler to create and schedule cron jobs. It's a substantially nicer solution and it provides a ton of additional benefits.","title":"Visitor Log Clean"},{"location":"examples/visitor_log_clean/#example-clean-visitor-logs","text":"","title":"Example: Clean Visitor Logs"},{"location":"examples/visitor_log_clean/#requirements","text":"Active Google account GCP project with Cloud Functions API enabled Cloud SQL database instance gcloud command-line tool (Recommended)","title":"Requirements"},{"location":"examples/visitor_log_clean/#downloads","text":"To use the Python runtime, two files are required: main.py and requirements.txt . You can download them here: main.py requirements.txt mkdir -pv visitor_log_clean && \\ curl -fsL \\ https://docs.auroraextensions.com/magento/extensions/1.x/magecroncloudfunctions/latest/python/src/visitor_log_clean/main.py > ./visitor_log_clean/main.py && \\ curl -fsL \\ https://docs.auroraextensions.com/magento/extensions/1.x/magecroncloudfunctions/latest/python/src/visitor_log_clean/requirements.txt > ./visitor_log_clean/requirements.txt","title":"Downloads"},{"location":"examples/visitor_log_clean/#objective","text":"Clean the database of visitor log entries using Cloud Functions.","title":"Objective"},{"location":"examples/visitor_log_clean/#steps","text":"Create visitor_log_clean cloud function The following environment variables are required for Cloud Functions to access Cloud SQL: DB_NAME : The name of the Magento database. DB_USER : The name of the database user. DB_PASS : The database user's password. PROJECT_ID : The Google Cloud Platform project ID. REGION_ID : The region where the Cloud SQL instance exists (e.g. us-central1, us-east4). INSTANCE_NAME : The name of Cloud SQL instance. Using gcloud , run the following: gcloud functions deploy visitor_log_clean --entry-point=\"log_clean\" \\ --runtime=python37 \\ --set-env-vars=DB_NAME=<YOUR_DB_NAME>,DB_USER=<YOUR_DB_USER>,DB_PASS=<YOUR_DB_PASS>,PROJECT_ID=<GCP_PROJECT_ID>,REGION_ID=<CLOUD_SQL_REGION_ID>,INSTANCE_NAME=<CLOUD_SQL_INSTANCE_NAME> \\ --source=\"./visitor_log_clean\" \\ --trigger-http Alternatively, you can use the Cloud Functions interface. Click Create Function from the list overview, and specify the following: Name: visitor_log_clean Memory: 256MB Trigger: HTTP Source code: Inline editor Runtime: Python 3.7 main.py: Contents of main.py from above requirements.txt: Contents of requirements.txt from above Function to execute: log_clean Next, click More and set each of the environment variables listed above. Then click Create . Add entry to <crontab> To make use of visitor_log_clean from within Magento, you will need to add the following to your module config.xml file: <crontab> <jobs> <visitor_log_clean> <schedule> <cron_expr>30 2 * * *</cron_expr> </schedule> <run> <model>magecroncloudfunctions/observer::run</model> </run> </visitor_log_clean> </jobs> </crontab> Alternatively, you can use Aoe_Scheduler to create and schedule cron jobs. It's a substantially nicer solution and it provides a ton of additional benefits.","title":"Steps"},{"location":"manuals/","text":"This documentation is for Magento 1.x. For Magento 2.x, see here . Manuals UserManual.pdf","title":"Manuals"},{"location":"manuals/#manuals","text":"UserManual.pdf","title":"Manuals"}]}