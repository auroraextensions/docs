{
    "docs": [
        {
            "location": "/",
            "text": "This documentation is for Magento 1.x. For Magento 2.x, see \nhere\n.\n\n\n\nTable of Contents\n\n\n\n\nHome\n\n\nExamples\n\n\nVisitor Log Clean\n\n\n\n\n\n\nLicense\n\n\nPython Scripts\n\n\nRelease Notes\n\n\nSitemap\n\n\nVersions\n\n\n\n\nWhat is Cloud Functions?\n\n\n\n  \n\n    Google Cloud Functions makes it easy for developers to run and scale code in the cloud and build event-driven serverless applications.\n  \n\n  \n\n    \nSimplest way to run your code in the cloud\n\n    \nAutomatically scales, highly available and fault tolerant\n\n    \nNo servers to provision, manage, patch or update\n\n    \nPay only while your code runs\n\n    \nConnects and extends cloud services\n\n  \n\n  \nSource:\u00a0\nGoogle\n\n\n\n\n\nWhat is Cron Cloud Functions?\n\n\nCron Cloud Functions is a Magento extension for running cron tasks via Cloud Functions.",
            "title": "Home"
        },
        {
            "location": "/#table-of-contents",
            "text": "Home  Examples  Visitor Log Clean    License  Python Scripts  Release Notes  Sitemap  Versions",
            "title": "Table of Contents"
        },
        {
            "location": "/#what-is-cloud-functions",
            "text": "Google Cloud Functions makes it easy for developers to run and scale code in the cloud and build event-driven serverless applications.\n   \n   \n     Simplest way to run your code in the cloud \n     Automatically scales, highly available and fault tolerant \n     No servers to provision, manage, patch or update \n     Pay only while your code runs \n     Connects and extends cloud services \n   \n   Source:\u00a0 Google",
            "title": "What is Cloud Functions?"
        },
        {
            "location": "/#what-is-cron-cloud-functions",
            "text": "Cron Cloud Functions is a Magento extension for running cron tasks via Cloud Functions.",
            "title": "What is Cron Cloud Functions?"
        },
        {
            "location": "/examples/visitor_log_clean/",
            "text": "This documentation is for Magento 1.x. For Magento 2.x, see \nhere\n.\n\n\n\nAt the time of writing, Cloud Functions only supports three runtimes: Node.js 6, Node.js 8, and Python 3.7. Examples use Python 3.7.\n\n\n\nExample: Clean Visitor Logs\n\n\nRequirements\n\n\n\n\nActive Google account\n\n\nGCP project with Cloud Functions API enabled\n\n\nCloud SQL database instance\n\n\ngcloud\n command-line tool (Recommended)\n\n\n\n\nDownloads\n\n\nTo use the Python runtime, two files are required: \nmain.py\n and \nrequirements.txt\n. You can download them here:\n\n\n\n\nmain.py\n\n\nrequirements.txt\n\n\n\n\nmkdir -pv visitor_log_clean && \\\ncurl -fsL \\\n     https://docs.nickolasburr.com/magento/extensions/1.x/croncloudfunctions/latest/python/src/visitor_log_clean/main.py\n     > ./visitor_log_clean/main.py && \\\ncurl -fsL \\\n     https://docs.nickolasburr.com/magento/extensions/1.x/croncloudfunctions/latest/python/src/visitor_log_clean/requirements.txt\n     > ./visitor_log_clean/requirements.txt\n\n\n\n\nObjective\n\n\nClean the database of visitor log entries using Cloud Functions.\n\n\nSteps\n\n\n\n\n\n\nCreate \nvisitor_log_clean\n cloud function\n\n\nThe following environment variables are required for Cloud Functions to access Cloud SQL:\n\n\n\n\nDB_NAME\n: The name of the Magento database.\n\n\nDB_USER\n: The name of the database user.\n\n\nDB_PASS\n: The database user's password.\n\n\nPROJECT_ID\n: The Google Cloud Platform project ID.\n\n\nREGION_ID\n: The region where the Cloud SQL instance exists (e.g. us-central1, us-east4).\n\n\nINSTANCE_NAME\n: The name of Cloud SQL instance.\n\n\n\n\nUsing \ngcloud\n, run the following:\n\n\n\ngcloud functions deploy visitor_log_clean\n                        --entry-point=\"log_clean\" \\\n                        --runtime=python37 \\\n                        --set-env-vars=DB_NAME=\n,DB_USER=\n,DB_PASS=\n,PROJECT_ID=\n,REGION_ID=\n,INSTANCE_NAME=\n \\\n                        --source=\"./visitor_log_clean\" \\\n                        --trigger-http\n\n\n\nAlternatively, you can use the \nCloud Functions\n interface. Click \nCreate Function\n\nfrom the list overview, and specify the following:\n\n\n\n\nName: visitor_log_clean\n\n\nMemory: 256MB\n\n\nTrigger: HTTP\n\n\nSource code: Inline editor\n\n\nRuntime: Python 3.7\n\n\nmain.py: Contents of \nmain.py\n from above\n\n\nrequirements.txt: Contents of \nrequirements.txt\n from above\n\n\nFunction to execute: \nlog_clean\n\n\n\n\nNext, click \nMore\n and set each of the environment variables listed above. Then click \nCreate\n.\n\n\n\n\n\n\nAdd entry to \n<crontab>\n\n\nTo make use of \nvisitor_log_clean\n from within Magento, you will need to add\nthe following to your module \nconfig.xml\n file:\n\n\n\n  \n\n    <crontab>\n      <jobs>\n        <visitor_log_clean>\n          <schedule>\n            <cron_expr>30 2 * * *</cron_expr>\n          </schedule>\n          <run>\n            <model>croncloudfunctions/observer::run</model>\n          </run>\n        </visitor_log_clean>\n      </jobs>\n    </crontab>\n  \n\n\n\n\nAlternatively, you can use \nAoe_Scheduler\n to create and schedule\ncron jobs. It's a substantially nicer solution and it provides a ton of additional benefits.",
            "title": "Visitor Log Clean"
        },
        {
            "location": "/examples/visitor_log_clean/#example-clean-visitor-logs",
            "text": "",
            "title": "Example: Clean Visitor Logs"
        },
        {
            "location": "/examples/visitor_log_clean/#requirements",
            "text": "Active Google account  GCP project with Cloud Functions API enabled  Cloud SQL database instance  gcloud  command-line tool (Recommended)",
            "title": "Requirements"
        },
        {
            "location": "/examples/visitor_log_clean/#downloads",
            "text": "To use the Python runtime, two files are required:  main.py  and  requirements.txt . You can download them here:   main.py  requirements.txt   mkdir -pv visitor_log_clean && \\\ncurl -fsL \\\n     https://docs.nickolasburr.com/magento/extensions/1.x/croncloudfunctions/latest/python/src/visitor_log_clean/main.py\n     > ./visitor_log_clean/main.py && \\\ncurl -fsL \\\n     https://docs.nickolasburr.com/magento/extensions/1.x/croncloudfunctions/latest/python/src/visitor_log_clean/requirements.txt\n     > ./visitor_log_clean/requirements.txt",
            "title": "Downloads"
        },
        {
            "location": "/examples/visitor_log_clean/#objective",
            "text": "Clean the database of visitor log entries using Cloud Functions.",
            "title": "Objective"
        },
        {
            "location": "/examples/visitor_log_clean/#steps",
            "text": "Create  visitor_log_clean  cloud function  The following environment variables are required for Cloud Functions to access Cloud SQL:   DB_NAME : The name of the Magento database.  DB_USER : The name of the database user.  DB_PASS : The database user's password.  PROJECT_ID : The Google Cloud Platform project ID.  REGION_ID : The region where the Cloud SQL instance exists (e.g. us-central1, us-east4).  INSTANCE_NAME : The name of Cloud SQL instance.   Using  gcloud , run the following:  \ngcloud functions deploy visitor_log_clean\n                        --entry-point=\"log_clean\" \\\n                        --runtime=python37 \\\n                        --set-env-vars=DB_NAME= ,DB_USER= ,DB_PASS= ,PROJECT_ID= ,REGION_ID= ,INSTANCE_NAME=  \\\n                        --source=\"./visitor_log_clean\" \\\n                        --trigger-http  Alternatively, you can use the  Cloud Functions  interface. Click  Create Function \nfrom the list overview, and specify the following:   Name: visitor_log_clean  Memory: 256MB  Trigger: HTTP  Source code: Inline editor  Runtime: Python 3.7  main.py: Contents of  main.py  from above  requirements.txt: Contents of  requirements.txt  from above  Function to execute:  log_clean   Next, click  More  and set each of the environment variables listed above. Then click  Create .    Add entry to  <crontab>  To make use of  visitor_log_clean  from within Magento, you will need to add\nthe following to your module  config.xml  file:  \n   \n    <crontab>\n      <jobs>\n        <visitor_log_clean>\n          <schedule>\n            <cron_expr>30 2 * * *</cron_expr>\n          </schedule>\n          <run>\n            <model>croncloudfunctions/observer::run</model>\n          </run>\n        </visitor_log_clean>\n      </jobs>\n    </crontab>\n     Alternatively, you can use  Aoe_Scheduler  to create and schedule\ncron jobs. It's a substantially nicer solution and it provides a ton of additional benefits.",
            "title": "Steps"
        }
    ]
}